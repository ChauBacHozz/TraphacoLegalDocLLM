import streamlit as st
import time
import numpy as np
import docx
from sentence_transformers import SentenceTransformer
from collections import OrderedDict
import os
import sys
from backend.graph_database.preprocessing.preprocess_docx import extract_text
from neo4j import GraphDatabase
from backend.document_upload_to_db import (save_modified_doc_appendix_type1_to_db,
                                            save_modified_doc_pre_appendix_type1_to_db,
                                            save_origin_doc_pre_appendix_type1_to_db,
                                            save_origin_doc_appendix_type1_to_db,
                                            save_modified_doc_pre_appendix_type2_to_db,
                                            save_origin_doc_appendix_type2_to_db,
                                            save_origin_doc_pre_appendix_type2_to_db
                                           )

EMBEDDING_MODEL_NAME = "dangvantuan/vietnamese-document-embedding"
driver = st.session_state.driver

st.set_page_config(page_title="Upload document", page_icon="üìà")

# L·∫•y ra embedding_model cho vƒÉn b·∫£n t·ª´ session_state ƒë√£ load
if "embedding_model" in st.session_state:
    embedding_model = st.session_state.embedding_model
else:
    embedding_model = SentenceTransformer(EMBEDDING_MODEL_NAME, trust_remote_code=True)

# X√¢y d·ª±ng c√°c th√†nh ph·∫ßn c·ªßa trang upload document
st.markdown("# Upload document")
st.sidebar.header("Upload your document")
st.write(
    """This function will upload your document and save to database"""
)

upload_files = st.file_uploader(
    "Choose a doc file", accept_multiple_files = True, type = ['docx']
)

"""
    VƒÉn b·∫£n ph√°p lu·∫≠t g·ªìm hai lo·∫°i:
        - VƒÉn b·∫£n th√¥ng t∆∞ ngh·ªã ƒë·ªãnh: ƒê∆∞·ª£c ƒë·ªãnh nghƒ©a l√† lo·∫°i 1 (type 1)
        - VƒÉn b·∫£n lu·∫≠t (e.g Lu·∫≠t D∆∞·ª£c): ƒê∆∞·ª£c ƒë·ªãnh nghƒ©a l√† lo·∫°i 2 (type 2)
    C·∫•u tr√∫c m·ªói vƒÉn b·∫£n d√π l√† lo·∫°i 1 hay lo·∫°i 2 ƒë·ªÅu g·ªìm c·∫•u tr√∫c hai ph·∫ßn:
        - N·ªôi dung ch√≠nh - n·∫±m ·ªü ph√≠a tr∆∞·ªõc m·ª•c l·ª•c (main_content)
        - M·ª•c l·ª•c (appendix)
    M·ªói vƒÉn b·∫£n s·∫Ω ƒë∆∞·ª£c chia th√†nh hai lo·∫°i vƒÉn b·∫£n:
        - VƒÉn b·∫£n g·ªëc (origin_doc)
        - VƒÉn b·∫£n b√£i b·ªè/ch·ªânh s·ª≠a/b·ªï sung (modified_doc)
    Nh∆∞ v·∫≠y c√≥ 4 tr∆∞·ªùng h·ª£p x·∫£y ra:
        - 
    Workflow khi upload document nh∆∞ sau:
        - B√≥c t√°ch t·ª´ file sang text, l·∫•y ra th√¥ng tin v·ªÅ ph·ª• l·ª•c (l√† index c·ªßa d√≤ng 
        b·∫Øt ƒë·∫ßu ph·ª• l·ª•c, n·∫øu kh√¥ng c√≥ ph·ª• l·ª•c th√¨ bi·∫øn ƒë√≥ s·∫Ω l√† None)
        - 
"""
    
if st.button("Upload to database"):
    for upload_file in upload_files:
        doc_file = docx.Document(upload_file)
        # Extract text from doc
        extracted_text, appendix_index = extract_text(doc_file)
        # Remove special text from extracted_text
        if appendix_index != None:
            pre_appendix_text = extracted_text[:appendix_index - 1]
            appendix_text = extracted_text[appendix_index - 1:]
        else:
            pre_appendix_text = extracted_text
        # Extract document heading
        doc_number = doc_file.tables[0].rows[1].cells[0].text
        heading = ": ".join(extracted_text[:2])
        # Type 1
        if "ngh·ªã ƒë·ªãnh" in heading.lower() or "th√¥ng t∆∞" in heading.lower():
            # if "s·ª≠a ƒë·ªïi" in heading.lower():
            if "s·ª≠a ƒë·ªïi" in heading.lower() or "b·ªï sung" in heading.lower() or "b√£i b·ªè" in heading.lower():
                # VƒÉn b·∫£n s·ª≠a ƒë·ªïi
                if appendix_index != None:
                    print("C√≥ ph·ª• l·ª•c")
                    save_modified_doc_appendix_type1_to_db(doc_file, heading, doc_number, driver)
                save_modified_doc_pre_appendix_type1_to_db(pre_appendix_text, heading, doc_number, driver)
            else:
                # VƒÉn b·∫£n g·ªëc
                if appendix_index != None:
                    print("C√≥ ph·ª• l·ª•c")
                    save_origin_doc_appendix_type1_to_db(doc_file, heading, doc_number, driver)
                save_origin_doc_pre_appendix_type1_to_db(pre_appendix_text, heading, doc_number, driver)
                st.toast(f"Saved {upload_file.name} database‚úÖ")
        # Type 2
        elif "lu·∫≠t" in heading.lower():
            if "s·ª≠a ƒë·ªïi" in heading.lower() or "b·ªï sung" in heading.lower() or "b√£i b·ªè" in heading.lower():
                # VƒÉn b·∫£n s·ª≠a ƒë·ªïi
                save_modified_doc_pre_appendix_type2_to_db(pre_appendix_text, heading, doc_number, driver)
            else:
                # VƒÉn b·∫£n g·ªëc
                if appendix_index != None:
                    print("C√≥ ph·ª• l·ª•c")
                    save_origin_doc_appendix_type2_to_db(doc_file, heading, doc_number, driver)
                save_origin_doc_pre_appendix_type2_to_db(pre_appendix_text, heading, doc_number, driver)
                st.toast(f"Saved {upload_file.name} database‚úÖ")
        else:
            print("ERROR")
        # Merge bullet from extracted text

